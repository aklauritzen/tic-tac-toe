{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","slice","calculateWinner","setState","handleClick","status","winner","renderSquare","React","Component","Game","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"sNAQA,SAASA,EAAOC,GACZ,OAEI,aADA,CACA,UAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACKF,EAAMG,Q,IAMbC,E,kDACF,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IASDK,MAAQ,CAETC,QAASC,MAAM,GAAGC,KAAK,MAGvBC,SAAS,GAfE,E,wDAmBPC,GAGR,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQM,QAGhCC,EAAgBP,IAAYA,EAAQI,KAKvCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IAExCE,KAAKG,SAAS,CACVR,QAASA,EACTG,SAAUE,KAAKN,MAAMI,a,mCAIhBC,GAAI,IAAD,OAEZ,OACI,cAACX,EAAD,CACII,MAAOQ,KAAKN,MAAMC,QAAQI,GAC1BR,QAAS,kBAAM,EAAKa,YAAYL,Q,+BAMxC,IACIM,EADEC,EAASJ,EAAgBF,KAAKN,MAAMC,SAU1C,OANIU,EADDC,EACU,WAAaA,EAGb,iBAAmBN,KAAKN,MAAMI,QAAU,IAAM,KAIvD,gCACI,qBAAKR,UAAU,SAAf,SAAyBe,IACzB,sBAAKf,UAAU,YAAf,UACKU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,MAE3B,sBAAKjB,UAAU,YAAf,UACKU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,MAEvB,sBAAKjB,UAAU,YAAf,UACKU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,a,GA5EfC,IAAMC,WAoFpBC,E,uKAEE,OACI,sBAAKpB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACG,EAAD,MAEJ,sBAAKH,UAAU,YAAf,UACI,wBACA,iC,GATDkB,IAAMC,WAgBzB,SAASP,EAAgBP,GAWrB,IAVA,IAAMgB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFZ,EAAI,EAAGA,EAAIY,EAAMC,OAAQb,IAAK,CAAC,IAAD,cACjBY,EAAMZ,GADW,GAC5Bc,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GAClE,OAAOpB,EAAQkB,GAGvB,OAAO,KAGXG,IAASC,OACL,cAACP,EAAD,IACAQ,SAASC,eAAe,W","file":"static/js/main.9b694e3e.chunk.js","sourcesContent":["// TODO: #2 Share app via Netlify\r\n// TODO: #3 Update readme.md\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// Renders a button\r\nfunction Square(props) {\r\n    return (\r\n        // Board passes onClick={() => this.handleClick(i)} to square.\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n  \r\n// Renders the board with nine squares\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        // Stores the state of all child components (squares)\r\n        // When the board state changes, the square components re-render automatically.\r\n        /*\r\n            'O', null, 'X',\r\n            'X', 'X', 'O',\r\n            'O', null, null,\r\n        */\r\n        this.state = {\r\n            // Create an array with nine items with the value null\r\n            squares: Array(9).fill(null),\r\n\r\n            // X is starting\r\n            xIsNext: true,\r\n        };\r\n    }\r\n    \r\n    handleClick(i) {\r\n        // Creates a copy (slice) of squares array to modify instead of the existing array.\r\n        // Keeps immutability\r\n        const squares = this.state.squares.slice();\r\n\r\n        // ignore click, if somehone has won or if Square is already filled.\r\n        if(calculateWinner(squares) || squares[i]) {            \r\n            return;\r\n        }\r\n\r\n        // Flips X and O\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';        \r\n\r\n        this.setState({\r\n            squares: squares,\r\n            xIsNext: !this.state.xIsNext, // set xIsNext to opposite\r\n        });\r\n    }\r\n\r\n    renderSquare(i) {\r\n        // Takes value (i) from the square array.\r\n        return (\r\n            <Square\r\n                value={this.state.squares[i]}\r\n                onClick={() => this.handleClick(i)}\r\n            />\r\n        );\r\n    }\r\n  \r\n    render() {\r\n        const winner = calculateWinner(this.state.squares);\r\n        let status;\r\n\r\n        if(winner) {\r\n            status = \"Winner: \" + winner;\r\n        } else {\r\n            // Next player based on xIsNext\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n  \r\n        return (\r\n            <div>\r\n                <div className=\"status\">{status}</div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n  \r\n// Renders board with placeholder values\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{/* status */}</div>\r\n                    <ol>{/* TODO */}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}  \r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n  \r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}